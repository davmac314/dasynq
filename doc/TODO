* STOP rearm for timers. Instead of just disabling a timer, actually stop (but don't deallocate) it.

* Use C++ standard library functions to get time (system time and monotonic time). Works on OS X, apparently,
  even when clock_gettime is not available. Use clock_gettime when available however as it may well have
  higher precision.

* Support disabling signal watchers? Issue currently is that signals are consumed by the event loop before
  watcher is enqueued, therefore a naive disable would actually lose signals. Probably should allow
  re-enable with and without flushing currently queued signals; might require that the signal actually
  be retrieved by the dispatch function.

* More tests.

* Maybe use pdfork on FreeBSD? allows safely signalling children without a mutex.
  However, requires an fd per child.

* User notification mechanism (add a watch to the event loop which can be signalled manually).

* kqueue: (re)investigate using kqueue timers.

* kqueue: use EVDISPATCH where available. On OS X, potentially use EVDISPATCH2 (which potentially
  also allows removing the wait lock, though this is obviously considerable work).
  
  Re OS X: the bug documented in extra/macos-kqueue-bug requires a workaround
  (dasynq-kqueue-macos.h) which precludes the use of EV_DISPATCH[2]. This bug would have to be
  resolved before EV_DISPATCH2 could be used.

* Current deregister implementation gets attention lock and issues delete. An alternative would be
  to test-acquire the attention lock and on failure, instead add the watcher to a queue and signal
  the current waiter (without waiting to acquire attention lock in *this* thread). On wake from
  waiting a thread would have to check the deregistration queue.

* Queue up multiple enable/disable commands to backends that support being issued commands in bulk
  (ie kqueue but not epoll), rather than issuing them individually. Needs care to determine when
  this can be done.

* Cache current clock times. The API allows for this but it hasn't been implemented.

* Event loop construction with eg child_proc and itimer masks two signals separately. This could
  be combined into a single operation.

* Allow creating multiple event loops in an application. This may necessitate allowing the
  construction of limited functionality event loops, eg event loops that cannot be used to watch
  child process status.

  - further, allow "embedding" event loops, if possible.
